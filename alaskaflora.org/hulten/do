#!/usr/bin/gawk -f 

@load "xml"

BEGIN{

  XMLMODE=0
  XMLCHARSET="utf-8"

  
  # READ QUERY STRING
  split(ENVIRON["QUERY_STRING"], qs, "&")
  for (q in qs) {
    split(qs[q], qp, "=")
    f[qp[1]] = substr(urldecode(qp[2]),1,100)
  }

  # SEARCH
  if ((f["method"] == "search") && (f["q"])) {
    
    header("Search results")
    print "<h1>Search results</h1>"
    print "<p>Query = <i>" f["q"] "</i><p>"

    # Read data
    PROCINFO["sorted_in"] = "@ind_str_asc"
  
    XMLMODE = 1
    while ((getline < "hulten.xml") > 0) {
      # attributes
      if (XMLSTARTELEM == "taxon")
        id = XMLATTR["id"]
      # gather cdata
      else if (XMLEVENT == "CHARDATA")
        cdata = $0
      # assign cdata to variables
      else if (XMLENDELEM == "name")
        name = cdata
      else if (XMLENDELEM == "syn")
        syn[cdata]++
      # end of record
      else if (XMLENDELEM == "taxon") {
        # test
        if (name ~ f["q"]) {
          out[name] = id
          # for (i in syn)
          #   print "  " i
        }
        delete syn
      }
    }
    XMLMODE = 0

    if (length(out)) {
      print "<table>"
      for (i in out)
        print "<tr><td><a href=\"do?method=detail&amp;id=" out[i] "\">" i "</a></td></tr>"
      print "</table>"
    }
    else
      print "<p>No results</p>"
    footer()
  }

  # DETAILS
  else if ((f["method"] == "detail") && f["id"]) {

    XMLMODE = 1
    while ((getline < "hulten.xml") > 0) {
      # attributes
      if (XMLSTARTELEM == "taxon")
        id = XMLATTR["id"]
      # gather cdata
      else if (XMLEVENT == "CHARDATA")
        cdata = $0
      # assign cdata to variables
      else if (XMLENDELEM == "name")
        name = cdata
      else if (XMLENDELEM == "syn")
        syn[cdata]++
      else if (XMLENDELEM == "common")
        common = cdata
      else if (XMLENDELEM == "desc")
        desc = cdata
      else if (XMLENDELEM == "ecol")
        ecol = cdata
      else if (XMLENDELEM == "tax")
        tax = cdata
      else if (XMLENDELEM == "use")
        use = cdata
      # end of record
      else if (XMLENDELEM == "taxon") {
        # test
        if (id == f["id"]) {
          outname = name
          outcommon = common
          outdesc = desc
          outecol = ecol
          outtax = tax
          outuse = use
          for (i in syn)
            outsyn = outsyn ", " i
        }
        delete syn
        id = name = common = tax = use = ""
      }
    }
    XMLMODE = 0

    header("Details: " f["id"])
    
    # print "<h1>Object details</h1>"

    print "<table>"
    print "<tr><td>&#160;</td><td style=\"font-weight:bold;\">" outname "</td></tr>"
    if (outsyn)
      print "<tr><td><i>Synonyms</i></td><td>" gensub(/^, /,"","G",outsyn)  "</td></tr>"
    if (outcommon)
      print "<tr><td><i>Common&#160;name</i></td><td>" outcommon "</td></tr>"
    if (outdesc)
      print "<tr><td><i>Description</i></td><td>" outdesc "</td></tr>"
    if (outecol)
      print "<tr><td><i>Ecology</i></td><td>" outecol "</td></tr>"
    if (outtax)
      print "<tr><td><i>Taxonomy&#160;notes</i></td><td>" outtax "</td></tr>"
    if (outuse)
      print "<tr><td><i>Uses</i></td><td>" outuse "</td></tr>"
    
    print "<tr><td>&#160;</td><td><img src=\"https://alaskaflora.org/img/hulten/" f["id"] ".jpg\" height=\"200px\"/></td></tr>"
    print "</table>"
    

    footer()
    
  }

  else {

    readdata()

    header("Hulten")
    
    print "<h1>Hulten</h1>"
    print "<p>Search:</p>"
    print "<form action=\"do\">"
    print "<input type=\"hidden\" name=\"method\" value=\"search\"/>"
    print "<table>"
    print "<tr><td>Name:</td><td>"                  \
      "<input type=\"text\" name=\"q\"/></td></tr>"
    print "</table>"
    #  print "<p>Search terms: plain text, or <a href=\"https://www.gnu.org/software/gawk/manual/gawk.html#Regexp\">regular expression</a>.<br/>Entering both Description and Material terms implies AND.</p><br/>"
    print "<input type=\"submit\" value=\"Search\"/>"
    
    print "</form>"
    footer()
    
  }
    
  exit 1
}

function header(title) {
  # version history: [chars app] -> [tcm app] -> here
  
  print "Content-type: text/html\n\n"                                   \
    "<!DOCTYPE html>"                                                   \
    "<html xmlns=\"http://www.w3.org/1999/xhtml\">"                     \
    "<head><title>" title "</title>"                                    \
    "<meta http-equiv=\"Content-Type\" content=\"text/html;"            \
    "charset=utf-8\" />"                                                \
    "<link href=\"https://handbook.arctosdb.org/images/favicon64.png\" " \
    "rel=\"shortcut icon\" type=\"image/png\"/>"                        
  # print "<style type=\"text/css\">"                                     \
  #   "body { font-size: 14px; font-family: 'Montserrat', "               \
  #   "Verdana, Arial, Helvetica, sans-serif; }"                          \
  #   ".main {width: 1000px; padding-top: 10px; margin-left: auto;"       \
  #   "  margin-right: auto; }"                                           \
  #   "h1 { padding-top:20px; }"                                          \
  #   "select , option { font-size: 14px }"                               \
  #   "table { border-collapse: collapse }"                               \
  #   "td, th { border: 1px solid black; padding: 5px }"                  \
  #   "a { color:#15358d; text-decoration:none; border-bottom-style:none }" \
  #   "a:visited { color:#9f1dbc }"                                       \
  #   "a:hover {color:#15358d; border-bottom-style:solid; "               \
  #   "border-bottom-width:thin }"                                        \
  #   ".graph { max-width: 100%; }"                                       \
  #   "</style>"                                                        

  print "<link href=\"//fonts.googleapis.com/css?family=Raleway:400,300,600\" rel=\"stylesheet\" type=\"text/css\"/>"
  
  print "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>" \
    "<link rel=\"stylesheet\" href=\"css/normalize.css\"/>"             \
    "<link rel=\"stylesheet\" href=\"css/skeleton.css\"/>"              \
    "<link rel=\"stylesheet\" href=\"css/override.css\"/>"

  print "</head>\n<body>"
  #print "<div class=\"main\">"

  print "<div class=\"container\">"                 \
    "<div class=\"row\" style=\"margin-top: 5%\">"  \
    "<div class=\"eight columns\" >"

  # "<link href=\"https://fonts.googleapis.com/css?family=Montserrat\" " \
  #  "rel=\"stylesheet\"/>"                                              \

}

function footer() {
  print "</div><div class=\"four columns\">"
  print "<a class=\"button\" style=\"width:100%\" href=\"do\">Home</a><br/>"
  print "<p style=\"border: 1px solid #BBB; border-radius: 4px; padding: 20px; background-color: #dbffa3;\">This is a digitized version of Eric Hultén’s (1968) Flora of Alaska, published by Stanford University Press (SUP). The book was digitized by Cam Webb as part of the New Flora of Alaska project, with funding by the US NSF, and is shared here with permission if SUP.</p>"
  print "</div></div></div>"
  
  # print "</div>"
  print "</body>\n</html>";
}

function urldecode(text,   hex, i, hextab, decoded, len, c, c1, c2, code) {
# decode urlencoded string
# urldecode function from Heiner Steven
#   http://www.shelldorado.com/scripts/cmds/urldecode
# version 1
	
  split("0 1 2 3 4 5 6 7 8 9 a b c d e f", hex, " ")
  for (i=0; i<16; i++) hextab[hex[i+1]] = i
  
  decoded = ""
  i = 1
  len = length(text)
  
  while ( i <= len ) {
    c = substr (text, i, 1)
    if ( c == "%" ) {
      if ( i+2 <= len ) {
        c1 = tolower(substr(text, i+1, 1))
        c2 = tolower(substr(text, i+2, 1))
        if ( hextab [c1] != "" || hextab [c2] != "" ) {
          # print "Read: %" c1 c2;
          # Allow: 
          # 20 begins main chars, but dissallow 7F (wrong in orig code!)
          #   tab, newline, formfeed, carriage return
          if ( ( (c1 >= 2) && ((c1 c2) != "7f") )   \
               || (c1 == 0 && c2 ~ "[9acd]") )
            {
              code = 0 + hextab [c1] * 16 + hextab [c2] + 0
              # print "Code: " code
              c = sprintf ("%c", code)
            } else {
            # for dissallowed chars
            c = " "
          }
          i = i + 2
        }
      }
    } else if ( c == "+" ) 	# special handling: "+" means " "
      c = " "
    decoded = decoded c
    ++i
  }
  
  # change linebreaks to \n
  gsub(/\r\n/, "\n", decoded);
  # remove last linebreak
  gsub(/[\n\r]*$/,"",decoded);
  return decoded
}

function readdata() {
  
  FS = "|"
  while((getline < "data") > 0) {

    AHRS[$1] = $2
    Site[$1]    = $3
    Year[$1]    = $4
    What[$1]    = $5
    Mat[$1]     = $6
    Loc[$1]     = $7
    Strat[$1]   = $11
    Quad[$1]    = $12
    Square[$1]    = $13
    Coll[$1]    = $14
    IDby[$1]    = $15
    Prep[$1]    = $16

    WhatList[$5]++
    MatList[$6]++
    SiteList[$3]++
    AHRSList[$2]++
  }
}
