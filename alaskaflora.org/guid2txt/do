#!/bin/gawk -E

@load "json"
@include "pw.awk"

BEGIN{
  
  header("Herbarium sheet OCR")

  if (ENVIRON["CONTENT_LENGTH"] > 10000000)
    fail("Image too large")
  
  # POST
  if (ENVIRON["CONTENT_TYPE"] ~ /form-data/)
    read_file()

  # GET
  else {
    split(ENVIRON["QUERY_STRING"], qs, "&")
    for (i in qs) {
      split(qs[i], qp, "=")
      f[qp[1]] = substr(urldecode(qp[2]),1,100)
    }
  
    if (f["method"] == "guid") {
      # check for misformed GUID
      if (f["guid"] !~ /^UAMb?:(Herb|Alg):[0-9]+$/)
        fail("GUID of wrong form. Must be: \"^UAMb?:(Herb|Alg):[0-9]+$\"")
      guid2url()
      # check for no media
      if (!url[f["guid"]])
        fail("No JPEG image for that GUID")
      Imgurl = url[f["guid"]]
    }
    
    else
      defaulttext()
  }

  # check for language ; NOTE: specifying language does not seem to help
  if (!f["lang"])
    fail("No Language specified")

  # fail("Lang: " f["lang"] " Image: " Imgurl)
  
  pw()
  "curl -s -X POST "                                                    \
    "-H 'Authorization: Bearer " APITOKEN "' "                          \
    "-H 'Content-Type: application/json' "                              \
    "-d '{\"providers\": \"google\",\"language\": \"" f["lang"] "\", "  \
    "\"file_url\": \"" Imgurl                                           \
    "\"}' https://api.edenai.run/v2/ocr/ocr"                            \
    | getline json

  fail(json)
  
  if (!json::from_json(json, data))
    fail("ERROR: API Query or JSON import failed.")
  if (data["google"]["status"] == "fail")
    fail(data["google"]["error"]["message"])
  
  print "<p><b>" (f["method"]=="guid" ? f["guid"] : "Your file") "</b></p>"
  print "<p style=\"border: thin silver solid; padding:20px; "    \
    "font-family:monospace;width:500px;\">"                       \
    data["google"]["text"] "</p>"

  # add translation if Russian
  if (f["lang"] != "en") {
    "curl -s -X POST "                                                  \
      "-H 'Authorization: Bearer " APITOKEN "' "                        \
      "-H 'Content-Type: application/json' "                            \
      "-d '{\"providers\": \"google\",\"source_language\": \"" f["lang"] \
      "\", \"target_language\":\"en\", \"text\": \""                    \
      data["google"]["text"] "\"}' "                                    \
      "https://api.edenai.run/v2/translation/automatic_translation"     \
      | getline json
    
    if (!json::from_json(json, data))
      fail("ERROR: API Query or JSON import failed.")
    if (data["google"]["status"] == "fail")
      fail(data["google"]["error"]["message"])
    
    print "<p><b>Translation</b></p>"
    print "<p style=\"border: thin silver solid; padding:20px; "  \
      "font-family:monospace;width:500px;\">"                     \
      data["google"]["text"] "</p>"
  }
  
  print "<br/><a target=\"_blank\" href=\"" Imgurl              \
    "\"><img src=\"" Imgurl "\" width=\"200\"/></a>" 
  
  print "<br/><br/><p>[ <a href=\"do\">BACK</a> ]</p>"
  footer()
}

function read_file(   field, resp) {

  RS="\r\n"
  while(getline < "/dev/stdin") {
    if ($0 ~ /^[Cc]ontent-[Dd]isposition/)
      field = gensub(/.* name="([^"]+)".*/, "\\1","G",$0)
    else if ($0 == "") {
      getline < "/dev/stdin"
      ## if there were newlines in an image:
      # while ($0 !~ /^----+/) {
      #   f[field] = f[field] RS $0
      #   getline < "/dev/stdin"
      # }
      # gsub(/^\r\n/,"",f[field])
      f[field] = $0
    }
  }

  print f["image"] > "../img/_ocr.jpg"
  delete f["image"]

  # test that the file is a jpeg
  "file ../img/_ocr.jpg" | getline resp
  if (resp !~ /JPEG image/)
    fail("file submitted is not a JPEG image file")
  
  Imgurl = "https://alaskaflora.org/img/_ocr.jpg"
}

function guid2url() {
  while (getline < "guid2url")
    url[$1] = $2
  # will overwrite if there are several media for each GUID. OK.
}

function defaulttext() {
  print "<h1>Herbarium sheet OCR</h1>"
  print "<form action=\"do\">"                                          \
    "<input type=\"hidden\" name=\"method\" value=\"guid\"/>"           \
    "<p>Arctos ALA GUID: <input type=\"text\" name=\"guid\" style=\"width:150px;\"/>" \
    "&#160;&#160;Label language: <select name=\"lang\"> "                     \
    "<option value=\"en\" selected=\"1\">English</option> "             \
    "<option value=\"ru\">Russian</option>"                             \
    "</select>"                                                         \
    "&#160;&#160;&#160;<input type=\"submit\" value=\"Submit\"/>"       \
    "</p></form>"
  print "<p><i>or...</i></p>"
  print "<form action=\"do\" enctype=\"multipart/form-data\" method=\"post\">" \
    "<input type=\"hidden\" name=\"method\" value=\"file\"/>"           \
    "<p>Send file: <input type=\"file\" name=\"image\" />"              \
    "&#160;&#160;Label language: <select name=\"lang\"> "               \
    "<option value=\"en\" selected=\"1\">English</option> "             \
    "<option value=\"ru\">Russian</option>"                             \
    "</select>"                                                         \
    "&#160;&#160;&#160;<input type=\"submit\" value=\"Submit\"/>"       \
    "</p></form>"
  footer()
  exit 0
}

function fail(text) {
  print "<p><b>" text "</b></p>"
  print "<br/><br/><p>[ <a href=\"do\">BACK</a> ]</p>"
  footer()
  exit 1
}

function header(title) {
  
  # Use html5
  print "Content-type: text/html\n"
  print "<!DOCTYPE html>"
  print "<html xmlns=\"http://www.w3.org/1999/xhtml\">"
  print "<head><title>" title "</title>"
  print "<meta http-equiv=\"Content-Type\" content=\"text/html; \
           charset=utf-8\" />"
  print "<link href=\"https://fonts.googleapis.com/css?family=Montserrat\" \
           rel=\"stylesheet\"/>"
  print "<link href=\"../img/akflora.png\" rel=\"shortcut icon\" \
           type=\"image/x-icon\"/>"
  print "<style>"
  print "body { font-size: 14px; font-family: 'Montserrat', "    \
    "Verdana, Arial, Helvetica, sans-serif; padding: 20px; "     \
    "position: absolute }"
  print "</style>"

  print "</head>\n<body>"
}


function footer() {
  print "</body>\n</html>";
}

function urldecode(text,   hex, i, hextab, decoded, len, c, c1, c2, code) {
  # based on Heiner Steven's http://www.shelldorado.com/scripts/cmds/urldecode
  split("0 1 2 3 4 5 6 7 8 9 a b c d e f", hex, " ")
  for (i=0; i<16; i++)
    hextab[hex[i+1]] = i
  decoded = "" ; i = 1 ; len = length(text)
  while ( i <= len ) {
    c = substr (text, i, 1)
    if ( c == "%" ) 
      if ( i+2 <= len ) {
        c1 = tolower(substr(text, i+1, 1)); c2 = tolower(substr(text, i+2, 1))
        if ( hextab [c1] != "" || hextab [c2] != "" ) {
          if ( ( (c1 >= 2) && ((c1 c2) != "7f") )   \
               || (c1 == 0 && c2 ~ "[9acd]") )
            c = sprintf("%c", 0 + hextab [c1] * 16 + hextab [c2] + 0)
          else
            c = " "
          i = i + 2
        }
      }
    else if ( c == "+" )
      c = " "
    decoded = decoded c
    ++i
  }
  gsub(/\r\n/, "\n", decoded);
  gsub(/\n*$/,"",decoded);
  return decoded
}
